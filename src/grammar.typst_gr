rule Goal {
    Content,
}

rule Content {
    EPS { () => mk_node(A.content, pieces: ()) },
    Content ContentPiece { (l, r) => { l.fields.pieces.push(r); l } },
}

rule ContentPiece {
    unknown,
    ContentBlock,
    "#" Statement { (_1, e) => mk_node(A.hash_expr, expr: e.fields.expr) },
}

rule Statement {
    ";" { _ => mk_node(A.stmt, expr: none) },
    Expr ";" { (e, _) => mk_node(A.stmt, expr: e) },
    Let ";" { (e, _) => mk_node(A.stmt, expr: e) },
    If ";" { (e, _) => mk_node(A.stmt, expr: e) },
    While ";" { (e, _) => mk_node(A.stmt, expr: e) },
    For ";" { (e, _) => mk_node(A.stmt, expr: e) },
    continue ";" { (_1, _2) => mk_node(A.stmt, expr: mk_node(A.continue_)) },
    break ";" { (_1, _2) => mk_node(A.stmt, expr: mk_node(A.break_)) },
    return Expr ";" { (_1, e, _2) => mk_node(A.stmt, expr: mk_node(A.return_, expr: e)) },
    return ";" { (_1, _2) => mk_node(A.stmt, expr: mk_node(A.return_, expr: none)) },
    Import ";" { (e, _) => mk_node(A.stmt, expr: e) },
}

rule Statements {
    EPS { () => () },
    Statements Statement { (l, r) => { if (r != none) { l.push(r) }; l } },
}

rule ContentBlock {
    "[" Content "]" { (_1, content, _2) => mk_node(A.content_block, content: content) },
}

rule CodeBlock {
    "{" Statements "}" { (_1, statements, _2) => mk_node(A.code_block, statements: statements) },
}

rule Block {
    ContentBlock,
    CodeBlock,
}

rule Let {
    let ident "=" ExprP2 { (_1, i, _2, e) => mk_node(A.let_, ident: i, expr: e, params: none) },
    let ident call_glue DefParamList "=" ExprP2 { (_1, i, _2, p, _3, e) => mk_node(A.let_, ident: i, expr: e, params: p) },
}

rule If {
    if Expr Block { (_, e, b) => mk_node(A.if_, expr: e, block: b, else_: none) },
    if Expr Block else Block { (_1, e, b1, _2, b2) => mk_node(A.if_, expr: e, block: b1, else_: b2) },
    if Expr Block else If { (_1, e, b1, _2, b2) => mk_node(A.if_, expr: e, block: b1, else_: b2) },
}

rule While {
    while Expr Block { (_, e, b) => mk_node(A.while_, expr: e, block: b) },
}

rule For {
    for ident in Expr Block { (_1, i, _2, e, b) => mk_node(A.for_, ident: i, expr: e, block: b, key: none) },
    for ident "," ident in Expr Block { (_1, k, _, v, _2, e, b) => mk_node(A.for_, ident: k, expr: e, block: b, key: v) },
}

rule ImportItems {
    "*" { _ => "*" },
    ident { i => (i, ) },
    ImportItems "," ident { (l, _, r) => { l.push(r); l } },
}

rule Import {
    import string { (_, s) => mk_node(A.import_, path: s, items: none) },
    import string ":" ImportItems { (_, s, _1, i) => mk_node(A.import_, path: s, items: i) },
    import string ":" ImportItems "," { (_, s, _1, i, _2) => mk_node(A.import_, path: s, items: i) },
}

rule Include {
    include string { (_, s) => mk_node(A.include_, path: s) },
}

rule Set {
    set Expr { (_, e) => mk_node(A.set_, expr: e, if_: none) },
    set Expr if Expr { (_, e, _1, c) => mk_node(A.set_, expr: e, if_: c) },
}

rule Show {
    show Expr ":" Lambda { (_, e, _1, l) => mk_node(A.show_, expr: e, action: l) },
    show Expr ":" Set { (_, e, _1, s) => mk_node(A.show_, expr: e, action: s) },
}

rule Lambda {
    DefParamList "=>" Expr { (p, _1, e) => mk_node(A.lambda, params: p, expr: e) },
    ident "=>" Expr { (i, _1, e) => mk_node(A.lambda, params: mk_node(A.param_list, args: (key: none, expr: i, sink: false), content: none), expr: e) },
}

rule CallParamList {
    DictOrArrayOrParams { (p) => mk_node(A.call_param_list, args: fix_paren_call(p), content: none) },
    DictOrArrayOrParams call_glue ContentBlock { (p, _, c) => mk_node(A.call_param_list, args: fix_paren_call(p), content: c) },
    ContentBlock { (c) => mk_node(A.call_param_list, args: (), content: c) },
}

rule DefParamList {
    DictOrArrayOrParams { (p) => mk_node(A.param_list, args: fix_paren_params(p), content: none) },
}

rule Sink {
    ".." Expr { (_, e) => mk_node(A.sink, expr: e) },
}

rule DictOrArrayOrParamsItem {
    Expr { (e) => (sink: false, key: none, value: e) },
    Sink { (s) => (sink: true, key: none, value: s.fields.expr) },
    ident ":" Expr { (k, _, v) => (sink: false, key: k, value: v) },
    string ":" Expr { (k, _, v) => (sink: false, key: k, value: v) },
}

rule DictOrArrayOrParamsItems {
    DictOrArrayOrParamsItem { (p) => (p, ) },
    DictOrArrayOrParamsItems "," DictOrArrayOrParamsItem { (l, _, r) => { l.push(r); l } },
}

rule DictOrArrayOrParams {
    "("  ")" { (_1, _2) => (elements: (), dict_flag: false, trailing_comma: false) },
    "(" ":" ")" { (_1, _2, _3) => (elements: (), dict_flag: false, trailing_comma: false) },
    "(" DictOrArrayOrParamsItems ")" { (_1, p, _2) => (elements: p, dict_flag: false, trailing_comma: false) },
    "(" ":" DictOrArrayOrParamsItems ")" { (_1, _2, p, _3) => (elements: p, dict_flag: true, trailing_comma: false) },
    "(" DictOrArrayOrParamsItems "," ")" { (_1, p, _2, _3) => (elements: p, dict_flag: false, trailing_comma: true) },
    "(" ":" DictOrArrayOrParamsItems "," ")" { (_1, _2, p, _3, _4) => (elements: p, dict_flag: true, trailing_comma: true) },
}

rule ExprP8 {
    ident, int, float, string, bool, none,
    DictOrArrayOrParams { e => fix_paren_value(e) },
    Block,
}

rule ExprP7 {
    ExprP8,
    "+" ExprP8 { (_, e) => mk_node(A.unary_plus, arg: e) },
    "-" ExprP8 { (_, e) => mk_node(A.unary_minus, arg: e) },
    ExprP8 "." ident { (l, _, r) => mk_node(A.member_access, lhs: l, rhs: r) },
    ExprP8 call_glue CallParamList { (f, _, args) => mk_node(A.call, func: f, args: args) },
}

rule ExprP6 {
    ExprP7,AA
    ExprP6 "*" ExprP7 { (l, _, r) => mk_node(A.binary_mul, lhs: l, rhs: r) },
    ExprP6 "/" ExprP7 { (l, _, r) => mk_node(A.binary_div, lhs: l, rhs: r) },
}

rule ExprP5 {
    ExprP6,
    ExprP5 "+" ExprP6 { (l, _, r) => mk_node(A.binary_add, lhs: l, rhs: r) },
    ExprP5 "-" ExprP6 { (l, _, r) => mk_node(A.binary_sub, lhs: l, rhs: r) },
}

rule ExprP4 {
    ExprP5,
    ExprP4 "==" ExprP5 { (l, _, r) => mk_node(A.binary_eq, lhs: l, rhs: r) },
    ExprP4 "!=" ExprP5 { (l, _, r) => mk_node(A.binary_ne, lhs: l, rhs: r) },
    ExprP4 "<" ExprP5 { (l, _, r) => mk_node(A.binary_lt, lhs: l, rhs: r) },
    ExprP4 ">" ExprP5 { (l, _, r) => mk_node(A.binary_gt, lhs: l, rhs: r) },
    ExprP4 "<=" ExprP5 { (l, _, r) => mk_node(A.binary_le, lhs: l, rhs: r) },
    ExprP4 ">=" ExprP5 { (l, _, r) => mk_node(A.binary_ge, lhs: l, rhs: r) },
    ExprP4 in ExprP5 { (l, _, r) => mk_node(A.binary_in, lhs: l, rhs: r) },
    ExprP4 not in ExprP5 { (l, _1, _2, r) => mk_node(A.binary_not_in, lhs: l, rhs: r) },
}

rule ExprP3 {
    ExprP4,
    not ExprP4 { (_, e) => mk_node(A.unary_not, arg: e) },
    ExprP3 and ExprP4 { (l, _, r) => mk_node(A.binary_and, lhs: l, rhs: r) },
}

rule ExprP2 {
    ExprP3,
    ExprP2 or ExprP3 { (l, _, r) => mk_node(A.binary_or, lhs: l, rhs: r) },
}

rule ExprP1 {
    ExprP2, Lambda,
    ExprP8 "=" ExprP2 { (l, _, r) => mk_node(A.assign, lhs: l, rhs: r) },
    ExprP8 "+=" ExprP2 { (l, _, r) => mk_node(A.add_assign, lhs: l, rhs: r) },
    ExprP8 "-=" ExprP2 { (l, _, r) => mk_node(A.sub_assign, lhs: l, rhs: r) },
    ExprP8 "*=" ExprP2 { (l, _, r) => mk_node(A.mul_assign, lhs: l, rhs: r) },
    ExprP8 "/=" ExprP2 { (l, _, r) => mk_node(A.div_assign, lhs: l, rhs: r) },
}

rule Expr {
    ExprP1,
}

rule eps {
    EPS { () => none },
}

cast ident(T.ident) {
    x => mk_node(A.ident, name: x.text)
}

cast int(T.literal_int) {
    x => mk_node(A.literal_int, value: x.text)
}

cast float(T.literal_float) {
    x => mk_node(A.literal_float, value: x.text)
}

cast string(T.literal_string) {
    x => mk_node(A.literal_string, value: x.text)
}

cast bool(T.literal_bool) {
    x => mk_node(A.literal_bool, value: x.text)
}

cast none(T.literal_none);

cast let(T.kw_let);
cast set(T.kw_set);
cast show(T.kw_show);
cast if(T.kw_if);
cast else(T.kw_else);
cast for(T.kw_for);
cast while(T.kw_while);
cast break(T.kw_break);
cast continue(T.kw_continue);
cast return(T.kw_return);
cast include(T.kw_include);
cast import(T.kw_import);
cast from(T.kw_from);
cast in(T.kw_in);
cast not(T.kw_not);
cast and(T.kw_and);
cast or(T.kw_or);

cast "+"(T.punc_plus);
cast "-"(T.punc_minus);
cast "*"(T.punc_star);
cast "/"(T.punc_slash);
cast "."(T.punc_dot);
cast ".."(T.punc_dotdot);
cast "="(T.punc_eq);
cast "+="(T.punc_pluseq);
cast "-="(T.punc_minuseq);
cast "*="(T.punc_stareq);
cast "/="(T.punc_slasheq);
cast "=="(T.punc_eqeq);
cast "!="(T.punc_neq);
cast "<"(T.punc_lt);
cast ">"(T.punc_gt);
cast "<="(T.punc_le);
cast ">="(T.punc_ge);
cast "("(T.punc_lparen);
cast ")"(T.punc_rparen);
cast "["(T.punc_lbracket);
cast "]"(T.punc_rbracket);
cast "{"(T.punc_lbrace);
cast "}"(T.punc_rbrace);
cast "#"(T.punc_hash);
cast ","(T.punc_comma);
cast ":"(T.punc_colon);
cast "=>"(T.punc_arrow);
cast ";"(T.punc_semi);
cast "$"(T.punc_dollar);

cast hs(T.hspace);
cast vs(T.vspace);

cast comment_doc(T.comment_doc) {
    x => mk_node(A.comment_doc, value: x.text)
}

cast comment_doc_outer(T.comment_doc_outer) {
    x => mk_node(A.comment_doc_outer, value: x.text)
}

cast comment_line(T.comment_line);
cast comment_block(T.comment_block);

cast unknown(T.unknown) {
    x => mk_node(A.unknown, value: x.text)
}

cast call_glue(T.workaround_call_glue);
