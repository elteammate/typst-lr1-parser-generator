use std::str::FromStr;
use crate::input::ast::*;

grammar;

pub Grammar: Grammar = {
    => Grammar { rules: vec![], casts: vec![] },
    <mut p:Grammar> <last:Rule> => {
        p.rules.push(last);
        p
    },
    <mut p:Grammar> <last:Cast> => {
        p.casts.push(last);
        p
    },
};

Rule: Rule = {
    "rule" <name:Ident> "{" <alternatives:Alternatives> "}" => {
        Rule { lhs: name, alternatives }
    },
}

Alternatives: Vec<Alternative> = {
    => vec![],
    <p:Alternatives> <last:Alternative> "," => {
        let mut p = p.clone();
        p.push(last);
        p
    },
};

Alternative: Alternative = {
    <terms:Terms> "{" <t:Typst> "}" => Alternative { rhs: terms, action: t },
    <terms:Terms> => Alternative { rhs: terms, action: Typst("a => a".to_string()) },
};

Terms: Vec<String> = {
    "EPS" => vec![],
    Term => vec![<>],
    <p:Terms> <last:Term> => {
        let mut p = p.clone();
        p.push(last);
        p
    },
};

Term: String = {
    <Str>,
    <Ident>,
};

Cast: Cast = {
    "cast" <name:Term> "(" <kind:Typst> ")" "{" <cast:Typst> "}" => Cast { typst_kind: kind, local_kind: name, cast },
    "cast" <name:Term> "(" <kind:Typst> ")" ";" => Cast { typst_kind: kind, local_kind: name, cast: Typst("_ => none".to_string()) },
};

Str: String = <s:r#""[^"]*""#> => s.to_string();
Ident: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_string();
Num: String = <s:r"[0-9]+"> => String::from_str(s).unwrap();

Typst: Typst = {
    => Typst("".to_string()),
    <t:Typst> <s:Str> => Typst(t.0 + "" + &s),
    <t:Typst> <i:Ident> => Typst(t.0 + "" + &i),
    <t:Typst> <n:Num> => Typst(t.0 + "" + &n),

    <t:Typst> "," => Typst(t.0 + ","),
    <t:Typst> "." => Typst(t.0 + "."),
    <t:Typst> ":" => Typst(t.0 + ":"),
    <t:Typst> ";" => Typst(t.0 + ";"),
    <t:Typst> "=>" => Typst(t.0 + "=>"),

    <p:Typst> "{" <t:Typst> "}" => Typst(p.0 + &format!("{{{}}}", t.0)),
    <p:Typst> "(" <t:Typst> ")" => Typst(p.0 + &format!("({})", t.0)),
    <p:Typst> "[" <t:Typst> "]" => Typst(p.0 + &format!("[{}]", t.0)),
}
